@node Parsing using the @commonlisp{} Reader
@chapter Parsing using the @commonlisp{} Reader

We use a special version of the @commonlisp{} reader based on
@eclectorlink{} to parse the contents of a buffer.  We use a special
version of the reader for the following reasons:

@itemize

@item
We need a different action from that of the standard reader when it
comes to interpreting tokens.  In particular, we do not necessarily want
the incremental parser to intern symbols automatically, and we do not
want the reader to fail when a symbol with an explicit package prefix
does not exist or when the package corresponding to the package prefix
does not exists.

@item
We need for the reader to return not only a resulting expression, but an
object that describes the start and end locations in the buffer where
the expression was read.

@item
The reader needs to return source elements that are not returned by an
ordinary reader, such as comments and expressions that are skipped by
certain other reader macros.

@item
The reader can not fail but must instead recover in some way when an
invalid syntax is encountered, nor when end of file is encountered in
the middle of a call.

@end itemize
