@node Incremental Parsing
@chapter Incremental Parsing

As mentioned in @ref{Representation of the Editor Buffer}, the general
control structure for buffer modifications and incremental updates was
designed with the following goals:

@itemize

@item
Most editing operations should be very fast, even when they involve
fairly large chunks of buffer contents.  Here, @emph{fast} means that
the response time for interactive editing should be short.

@item
From a software-engineering point of view, the buffer editing operations
should not be aware of the presence of any @emph{views}.

@end itemize

Notice that it was @emph{not} a goal that editing operations use as
little computational power as possible.

Input events can be divided into two categories:

@itemize

@item
Input events that result in some modification to some buffer contents.
Inserting and deleting items are in this category.  Modifications can be
the result of indirect events such as executing a keyboard macro that
inserts or deletes items in one or more buffers.

@item
Input events that have no effect on any buffer contents.  Moving a
cursor, changing the size of a window, or scrolling a view are typical
events in this category.  These events influence only the @emph{view}
into a buffer.

@end itemize

When an event in the first category occurs, the following chain of
events is triggered:

@enumerate

@item
The event itself triggers the execution of some @emph{command} that
causes one or more items to be inserted and/or deleted from one or more
buffers.  Whether this happens as a direct result or as an indirect
result of the event makes no difference.  The buffers involved are
modified, but no other action is taken at this time.  Lines that are
modified or inserted are marked with the @emph{current time stamp} and
the current time stamp is incremented, possibly more than once.

@item
At the end of the execution of the command, the @emph{syntax update} is
executed for all buffers, allowing the contents to be incrementally
parsed according to the syntax associated with the buffer.

@quotation warning
There seem to be cases where the syntax of one buffer depends not only
on its own associated buffer, but also on the contents of other buffers.
It is not a big problem if the dependency is only on the @emph{contents}
of other buffers, but if the dependency is also on the @emph{result of
the syntax analysis} of other buffers, then one syntax update might
invalidate another.  In that case, it might be necessary to loop until
all analyses are complete.  This can become very complicated because
there can now be circular dependencies so that the entire editor gets
caught in an infinite loop.
@end quotation

Finally, visible views are repainted using whatever combination they
want of the buffer contents and the result of the syntax update.  The
syntax update uses the time stamps of lines in the buffer and of the
previous syntax update to compute an up-to-date representation of the
buffer.  This computation is done incrementally as much as possible.

@item
Each view on display recomputes the data presented to the user and
redraws the associated window.  Again, time stamps are used to make this
computation as incremental as possible.

@end enumerate

@menu
* Data Structures::
* Moving Top-level Wads::
* Incremental Update::
@end menu

@node Data Structures
@section Data Structures

@menu
* Prefix and Suffix::
@end menu

@node Prefix and Suffix
@subsection Prefix and Suffix

@cindex prefix
@cindex suffix
@sysname{} maintains a sequence @footnote{It is not a @commonlisp{}
sequence, but just a suite represented in a different way.}  of
@emph{top-level wads}.  This sequence is organized as two ordinary
@commonlisp{} lists, called the @anchor{term-prefix}@dfn{prefix} and the
@anchor{term-suffix}@dfn{suffix}.  Given a top-level location @math{L}
in the buffer, the prefix contains a list of the top-level wad that
precede @math{L} and the suffix contains a list of the top-level wads
that follow @math{L}.  The top-level wads in the prefix occur in reverse
order compared to order in which they appear in the buffer.  The
top-level wads in the suffix occur in the same order as they appear in
the buffer.  the location @math{L} is typically immediately before or
immediately after the top-level expression in which the @emph{cursor} of
the current view is located, but that is not a requirement.
@ref{fig:prefix-suffix} illustrates the prefix and the suffix of a
buffer with five top-level expressions.

@float Figure,fig:prefix-suffix
@center @image{fig-prefix-suffix}
@caption{Prefix and suffix containing top-level wads.}
@end float

Either the prefix or the suffix or both may be the empty list.  The
location @math{L} may be moved.  It suffices @footnote{Some slots also need
to be updated as will be discussed later.}  to pop an element off of one
of the lists and push it onto the other.

To illustrate the above data structures, we use the following example:

@verbatim
...
34 (f 10)
35
36 (let ((x 1)
37       (y 2))
38   (g (h x)
39      (i y)
40      (j x y)))
41
42 (f 20)
...
@end verbatim

Each line is preceded by the absolute line number.  If the wad
starting at line 36 is a member of the prefix or if it is the
first element of the suffix, it would be represented like this:

@verbatim
36 04 (let ((x 1) (y 2)) (g (h x) (i y) (j x y)))
   00 01 ((x 1) (y 2))
      00 00 (x 1)
      01 00 (y 2)
   02 02 (g (h x) (i y) (j x y))
      00 00 (h x)
      01 00 (i y)
      02 00 (j x y)
@end verbatim

Since column numbers are uninteresting for our illustration, we
show only line numbers.  Furthermore, we present a list as a table for
a more compact presentation.

@node Moving Top-level Wads
@section Moving Top-level Wads

Occasionally, some top-level wads need to be moved from the prefix to
the suffix or from the suffix to the prefix.  There could be several
reasons for such moves:

@itemize

@item
The place between the prefix and the suffix must always be near the part
of the buffer currently on display when the contents are presented to
the user.  If the part on display changes as a result of scrolling or as
a result of the user moving the current cursor, then the prefix and
suffix must be adjusted to reflect the new position prior to the
presentation.

@item
After items have been inserted into or deleted from the buffer, the
incremental parser may have to adjust the prefix and the suffix so that
the altered top-level wads are near the beginning of the suffix.

@end itemize

These adjustments are always accomplished by repeatedly moving a single
top-level wad.

To move a single top-level wad @math{P} from the prefix to the suffix,
the following actions are executed:

@enumerate

@item
Modify the slot @t{start-line} of the first wad of the suffix so that,
instead of containing the absolute line number, it contains the line
number relative to the value of the slot @t{start-line} of @math{P}.

@item
Pop @math{P} from the prefix and push it onto the suffix.  Rather than
using the straightforward technique, the @t{cons} cell referring to
@math{P} can be reused so as to avoid unnecessary consing.

@end enumerate

To move a single top-level wad @math{P} from the suffix to the prefix, the
following actions are executed:

@enumerate

@item
If @math{P} has a successor @math{S} in the suffix, then the slot
@t{start-line} of @math{S} is adjusted so that it contains the absolute
line number as opposed to the line number relative to the slot
@t{start-line} of @math{P}.

@item
Pop @math{P} from the suffix and push it onto the prefix.  Rather than
using the straightforward technique, the @t{cons} cell referring to
@math{P} can be reused so as to avoid unnecessary consing.

@end enumerate

We illustrate this process by showing four possible top-level
locations in the example buffer.  If all three top-level wads
are located in the suffix, we have the following situation:

@verbatim
prefix
...
suffix
34 00 (f 10)
02 04 (let ((x 1) (y 2)) (g (h x) (i y) (j x y)))
06 00 (f 20)
...
@end verbatim

In the example, we do not show the children of the top-level wad.

If the prefix contains the first top-level expression and the suffix the
other two, we have the following situation:

@verbatim
prefix
...
34 00 (f 10)
suffix
36 04 (let ((x 1) (y 2)) (g (h x) (i y) (j x y)))
06 00 (f 20)
...
@end verbatim

If the prefix contains the first two top-level expressions and the
suffix the remaining one, we have the following situation:

@verbatim
prefix
...
34 00 (f 10)
36 04 (let ((x 1) (y 2)) (g (h x) (i y) (j x y)))
suffix
42 00 (f 20)
...
@end verbatim

Finally, if the prefix contains all three top-level expressions, we have
the following situation:

@verbatim
prefix
...
34 00 (f 10)
36 04 (let ((x 1) (y 2)) (g (h x) (i y) (j x y)))
42 00 (f 20)
suffix
...
@end verbatim

@node Incremental Update
@section Incremental Update

Modifications to the buffer are reported at the granularity of entire
lines.  The following operations are possible:

@itemize

@item
A line may be modified.

@item
A line may be inserted.

@item
A line may be deleted.

@end itemize

Several different lines may be modified between two incremental updates,
and in different ways.  The first step in an incremental update step is
to invalidate wads that are no longer known to be correct after these
modifications.  This step modifies the data structure described in
@ref{Prefix and Suffix} in the following way:

@itemize

@item
After the invalidation step, the prefix contains the wad preceding the
first modified line, so that these wads are still valid.

@item
The suffix contains those wads following the last modified line.  These
wads are still valid, but they may no longer be top-level wads, because
the nesting may have changed as a result of the modifications preceding
the suffix.

@item
An additional list of @emph{residual wads} is created.  This list
contains wads that have not been invalidated by the modifications,
i.e. that appear only in lines that have not been modified.

@end itemize

The order of the wads in the list of residual wads is the same as the
order of the wads in the buffer.  The slot @t{start-line} of each wad in
the list is the absolute line number of the initial character of that
wad.

Suppose, for example, that the buffer contents in our running example
was modified so that line 37 was altered in some way, and a line was
inserted between the lines 39 and 40.  As a result of this update, we
need to represent the following wads:

@verbatim
...
34 (f 10)
35
36       (x 1)
37
38      (h x)
39      (i y)
40
41      (j x y)
42
43 (f 20)
...
@end verbatim

In other words, we need to obtain the following representation:

@verbatim
prefix
...
34 00 (f 10)
residual
36 00 (x 1)
38 00 (h x)
39 00 (i y)
41 00 (j x y)
suffix
43 00 (f 20)
...
@end verbatim

@menu
* Processing Modifications::
* Recreating the Cache::
@end menu

@node Processing Modifications
@subsection Processing Modifications

While the list of residual wads is being constructed, its elements are
in the reverse order.  Only when all buffer updates have been processed
is the list of residual wads reversed to obtain the final
representation.

All line modifications are reported in increasing order of line number.
Before the first modification is processed, the prefix and the suffix
are positioned as indicated above, and the list of residual wads is
initialized to the empty list.

The following actions are taken, depending on the position of the
modified line with respect to the suffix, and on the nature of the
modification:

@itemize

@item
If a line has been modified, and either the suffix is empty or the
modified line precedes the first wad of the suffix, then no action is
taken.

@item
If a line has been deleted, and the suffix is empty, then no action is
taken.

@item
If a line has been deleted, and it precedes the first wad of the suffix,
then the slot @t{start-line} of the first wad of the suffix is
decremented.

@item
If a line has been inserted, and the suffix is empty, then no action is
taken.

@item
If a line has been inserted, and it precedes the first wad of the
suffix, then the slot @t{start-line} of the first wad of the suffix
is incremented.

@item
If a line has been modified and the entire first wad of the suffix is
entirely contained in this line, then remove the first wad from the
suffix and start the entire process again with the same modified line.
To remove the first wad from the suffix, first adjust the slot
@t{start-line} of the second element of the suffix (if any) to reflect
the absolute start line.  Then pop the first element off the suffix.

@item
If a line has been modified, deleted, or inserted, in a way that may
affect the first wad of the suffix, then this wad is first removed from
the suffix and then processed as indicated below.  Finally, start the
entire process again with the same modified line.  To remove the first
wad from the suffix, first adjust the slot @t{start-line} of the second
element of the suffix (if any) to reflect the absolute start line.  Then
pop the first element off the suffix.

@end itemize

Modifications potentially apply to elements of the suffix.  When such an
element needs to be taken apart, we try to salvage as many as possible
of its descendants.  We do this by moving the element to a
@emph{worklist} organized as a stack represented as an ordinary
@commonlisp{} list.  The top of the stack is taken apart by popping it
from the stack and pushing its children.  This process goes on until
either the top element has no children, or it is no longer affected by a
modification to the buffer, in which case it is moved to the list of
residual wads.

Let us see how we process the modifications in our running example.

Line 37 has been altered, so our first task is to adjust the prefix and
the suffix so that the prefix contains the last wad that is unaffected
by the modifications.  This adjustment results in the following
situation:

@verbatim
prefix
...
34 00 (f 10)
residue
worklist
suffix
36 04 (let ((x 1) (y 2)) (g (h x) (i y) (j x y)))
06 00 (f 20)
...
@end verbatim

The first wad of the suffix is affected by the fact that line 37 has
been modified.  We must move the children of that wad to the worklist.
In doing so, we make the @t{start-line} of the children reflect the
absolute line number, and we also make the @t{start-line} of the next
wad of the suffix also reflect the absolute line number.  We obtain the
following situation:

@verbatim
prefix
...
34 00 (f 10)
residue
worklist
36 01 ((x 1) (y 2))
38 02 (g (h x) (i y) (j x y))
suffix
42 00 (f 20)
...
@end verbatim

The first element of the worklist is affected by the modification of
line 37.  We therefore remove it from the worklist, and add its children
to the top of the worklist.  In doing so, we make the @t{start-line} of
those children reflect absolute line numbers.  We obtain the following
situation:

@verbatim
prefix
...
34 00 (f 10)
residue
worklist
36 00 (x 1)
37 00 (y 2)
38 02 (g (h x) (i y) (j x y))
suffix
42 00 (f 20)
...
@end verbatim

The first element of the worklist is unaffected by the modification,
because it precedes the modified line entirely.  We therefore move it to
the residue list.  We now have the following situation:

@verbatim
prefix
...
34 00 (f 10)
residue
36 00 (x 1)
worklist
37 00 (y 2)
38 02 (g (h x) (i y) (j x y))
suffix
42 00 (f 20)
...
@end verbatim

The first wad of the top of the worklist is affected by the
modification.  It has no children, so we pop it off the worklist.

@verbatim
prefix
...
34 00 (f 10)
residue
36 00 (x 1)
worklist
38 02 (g (h x) (i y) (j x y))
suffix
42 00 (f 20)
...
@end verbatim

The modification of line 37 is now entirely processed.  We know this
because the first wad on the worklist occurs beyond the modified line in
the buffer.  We therefore start processing the line inserted between the
existing lines 39 and 40.  The first item on the worklist is affected by
this insertion.  We therefore remove it from the worklist and push its
children instead.  In doing so, we make the @t{start-line} slot those
children reflect the absolute line number.  We obtain the following
result:

@verbatim
prefix
...
34 00 (f 10)
residue
36 00 (x 1)
worklist
38 00 (h x)
39 00 (i y)
40 00 (j x y)
suffix
42 00 (f 20)
...
@end verbatim

The first element of the worklist is unaffected by the insertion because
it precedes the inserted line entirely.  We therefore move it to the
residue list.  We now have the following situation:

@verbatim
prefix
...
34 00 (f 10)
residue
36 00 (x 1)
38 00 (h x)
worklist
39 00 (i y)
40 00 (j x y)
suffix
42 00 (f 20)
...
@end verbatim

Once again, the first element of the worklist is unaffected by the
insertion because it precedes the inserted line entirely.  We therefore
move it to the residue list.  We now have the following situation:

@verbatim
prefix
...
34 00 (f 10)
residue
36 00 (x 1)
38 00 (h x)
39 00 (i y)
worklist
40 00 (j x y)
suffix
42 00 (f 20)
...
@end verbatim

The first element of the worklist is affected by the insertion, in that
it must have its line number incremented.  In fact, every element of the
worklist and also the first element of the suffix must have their line
numbers incremented.  Furthermore, this update finishes the processing
of the inserted line.  We now have the following situation:

@verbatim
prefix
...
34 00 (f 10)
residue
36 00 (x 1)
38 00 (h x)
39 00 (i y)
worklist
41 00 (j x y)
suffix
43 00 (f 20)
...
@end verbatim

With no more buffer modifications to process, we terminate the procedure
by moving remaining wads from the worklist to the residue list.  The
final situation is shown here:

@verbatim
prefix
...
34 00 (f 10)
residue
36 00 (x 1)
38 00 (h x)
39 00 (i y)
41 00 (j x y)
worklist
suffix
43 00 (f 20)
...
@end verbatim

@node Recreating the Cache
@subsection Recreating the Cache

@cindex cache
Once the cache has been processed so that only wads that are known to be
valid remain, the new buffer contents must be fully parsed so that its
complete structure is reflected in the cache.

Conceptually, we obtain a complete cache by applying @t{read} repeatedly
from the beginning of the buffer, until all top-level wad have been
found.  But doing it this way essentially for every keystroke would be
too slow.  In this section we explain how the partially invalidated
cache is used to make this process sufficiently fast.
